import argparse

try:
    import sonic_yang
    SONIC_YANG_AVAILABLE = True
except ImportError:
    SONIC_YANG_AVAILABLE = False

YANG_MODELS_DIR = "/usr/local/yang-models"
DEFAULT_OUTPUT_FILE = "common/cfg_schema.h"

# Fallback schema keys when sonic_yang is not available
FALLBACK_SCHEMA_KEYS = [
    "AAA", "ACL_RULE", "ACL_TABLE", "ACL_TABLE_TYPE", "ASIC_SENSORS", "AS_PATH_SET",
    "AUTO_TECHSUPPORT", "AUTO_TECHSUPPORT_FEATURE", "BANNER_MESSAGE", "BGP_ALLOWED_PREFIXES",
    "BGP_BBR", "BGP_DEVICE_GLOBAL", "BGP_GLOBALS", "BGP_GLOBALS_AF", "BGP_GLOBALS_AF_AGGREGATE_ADDR",
    "BGP_GLOBALS_AF_NETWORK", "BGP_GLOBALS_LISTEN_PREFIX", "BGP_INTERNAL_NEIGHBOR", "BGP_MONITORS",
    "BGP_NEIGHBOR", "BGP_NEIGHBOR_AF", "BGP_PEER_GROUP", "BGP_PEER_GROUP_AF", "BGP_PEER_RANGE",
    "BGP_SENTINELS", "BGP_VOQ_CHASSIS_NEIGHBOR", "BMP", "BREAKOUT_CFG", "BUFFER_PG", "BUFFER_POOL",
    "BUFFER_PORT_EGRESS_PROFILE_LIST", "BUFFER_PORT_INGRESS_PROFILE_LIST", "BUFFER_PROFILE",
    "BUFFER_QUEUE", "CABLE_LENGTH", "CHASSIS_MODULE", "COMMUNITY_SET", "CONSOLE_PORT", "CONSOLE_SWITCH",
    "COPP_GROUP", "COPP_TRAP", "CRM", "DASH_ACL_GROUP", "DASH_ACL_IN", "DASH_ACL_OUT", "DASH_ACL_RULE",
    "DASH_APPLIANCE", "DASH_ENI", "DASH_QOS", "DASH_ROUTE_TABLE", "DASH_ROUTING_TYPE", "DASH_VNET",
    "DASH_VNET_MAPPING_TABLE", "DEFAULT_LOSSLESS_BUFFER_PARAMETER", "DEVICE_METADATA", "DEVICE_NEIGHBOR",
    "DEVICE_NEIGHBOR_METADATA", "DHCP_RELAY", "DHCP_SERVER", "DHCP_SERVER_IPV4", "DHCP_SERVER_IPV4_CUSTOMIZED_OPTIONS",
    "DHCP_SERVER_IPV4_PORT", "DHCP_SERVER_IPV4_RANGE", "DNS_NAMESERVER", "DOT1P_TO_TC_MAP", "DPUS",
    "DPU_PORT", "DSCP_TO_FC_MAP", "DSCP_TO_TC_MAP", "EXP_TO_FC_MAP", "EXTENDED_COMMUNITY_SET",
    "FABRIC_MONITOR", "FABRIC_PORT", "FEATURE", "FG_NHG", "FG_NHG_MEMBER", "FG_NHG_PREFIX", "FIPS",
    "FLEX_COUNTER_TABLE", "FLOW_COUNTER_ROUTE_PATTERN", "GNMI", "GNMI_CLIENT_CERT", "GRPCCLIENT",
    "HIGH_FREQUENCY_TELEMETRY_GROUP", "HIGH_FREQUENCY_TELEMETRY_PROFILE", "INTERFACE", "KDUMP",
    "KUBERNETES_MASTER", "LDAP", "LDAP_SERVER", "LLDP", "LLDP_PORT", "LOGGER", "LOOPBACK_INTERFACE",
    "LOSSLESS_TRAFFIC_PATTERN", "MACSEC_PROFILE", "MAP_PFC_PRIORITY_TO_QUEUE", "MCLAG_DOMAIN",
    "MCLAG_INTERFACE", "MCLAG_UNIQUE_IP", "MEMORY_STATISTICS", "MGMT_INTERFACE", "MGMT_PORT",
    "MGMT_VRF_CONFIG", "MID_PLANE_BRIDGE", "MIRROR_SESSION", "MPLS_TC_TO_TC_MAP", "MUX_CABLE",
    "MUX_LINKMGR", "NAT_BINDINGS", "NAT_GLOBAL", "NAT_POOL", "NEIGH", "NTP", "NTP_KEY", "NTP_SERVER",
    "NVGRE_TUNNEL", "NVGRE_TUNNEL_MAP", "PASSW_HARDENING", "PBH_HASH", "PBH_HASH_FIELD", "PBH_RULE",
    "PBH_TABLE", "PEER_SWITCH", "PFC_PRIORITY_TO_PRIORITY_GROUP_MAP", "PFC_WD", "POLICER", "PORT",
    "PORTCHANNEL", "PORTCHANNEL_INTERFACE", "PORTCHANNEL_MEMBER", "PORT_QOS_MAP", "PORT_STORM_CONTROL",
    "PREFIX", "PREFIX_LIST", "PREFIX_SET", "QUEUE", "RADIUS", "RADIUS_SERVER", "RESTAPI", "ROUTE_MAP",
    "ROUTE_MAP_SET", "ROUTE_REDISTRIBUTE", "SCHEDULER", "SERIAL_CONSOLE", "SFLOW", "SFLOW_COLLECTOR",
    "SFLOW_SESSION", "SNMP", "SNMP_AGENT_ADDRESS_CONFIG", "SNMP_COMMUNITY", "SNMP_USER", "SRV6_MY_LOCATORS",
    "SRV6_MY_SIDS", "SSH_SERVER", "STATIC_NAPT", "STATIC_NAT", "STATIC_ROUTE", "SUBNET_DECAP",
    "SUPPRESS_ASIC_SDK_HEALTH_EVENT", "SWITCH_HASH", "SWITCH_TRIMMING", "SYSLOG_CONFIG",
    "SYSLOG_CONFIG_FEATURE", "SYSLOG_SERVER", "SYSTEM_DEFAULTS", "SYSTEM_PORT", "TACPLUS",
    "TACPLUS_SERVER", "TC_TO_DSCP_MAP", "TC_TO_PRIORITY_GROUP_MAP", "TC_TO_QUEUE_MAP", "TELEMETRY",
    "TELEMETRY_CLIENT", "TUNNEL", "VERSIONS", "VLAN", "VLAN_INTERFACE", "VLAN_MEMBER", "VLAN_SUB_INTERFACE",
    "VNET", "VNET_ROUTE_TUNNEL", "VOQ_INBAND_INTERFACE", "VRF", "VXLAN_EVPN_NVO", "VXLAN_TUNNEL",
    "VXLAN_TUNNEL_MAP", "WARM_RESTART", "WRED_PROFILE", "XCVRD_LOG", "chk_crm_threshold", "notification"
]

def write_cfg_schema(keys, output_file="cfg_schema.h"):
    header = """#ifndef CFG_SCHEMA_H
#define CFG_SCHEMA_H

// Macros for table names are autogenerated by gen_cfg_schema.py. Manual update will not be preserved.
#ifdef __cplusplus
namespace swss {
#endif
"""
    footer = """
#ifdef __cplusplus
}
#endif
#endif"""

    with open(output_file, "w") as f:
        f.write(header)
        f.write("\n")
        for key in sorted(keys):
            if '-' in key:
                # Comment out keys with hyphens as they can't be valid C macros
                f.write('// #define CFG_{}_TABLE_NAME "{}"\n'.format(key, key))
            else:
                f.write('#define CFG_{}_TABLE_NAME "{}"\n'.format(key, key))
        f.write(footer)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-d',
                        dest='dir',
                        metavar='yang directory',
                        type=str,
                        help='the yang directory to generate cfg_schema.h',
                        default=YANG_MODELS_DIR)
    parser.add_argument('-o',
                        dest='output',
                        metavar='output file',
                        type=str,
                        help='output file path for cfg_schema.h',
                        default=DEFAULT_OUTPUT_FILE)

    args = parser.parse_args()
    
    if SONIC_YANG_AVAILABLE:
        # Use sonic_yang to generate schema dynamically
        yang_dir = args.dir
        sy = sonic_yang.SonicYang(yang_dir)
        sy.loadYangModel()
        keys = [k for k, v in sy.confDbYangMap.items() if "container" in v]
    else:
        # Fallback to predefined schema keys
        print("Warning: sonic_yang not available, using fallback schema")
        keys = FALLBACK_SCHEMA_KEYS
    
    write_cfg_schema(keys, args.output)

if __name__ == "__main__":
    main()
