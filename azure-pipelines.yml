# C/C++ with GCC
# Build your C/C++ project with GCC using make.
# Add steps that publish test results, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/c-cpp/gcc
pr:
- master
- 202???
- 201???

trigger:
  batch: true
  branches:
    include:
    - master
    - 202???
    - 201???

# this part need to be set in UI
schedules:
- cron: "0 0 * * 6"
  displayName: Weekly build
  branches:
    include:
    - master
    - 202???
    - 201???
  always: true

resources:
  repositories:
  - repository: sonic-sairedis
    type: github
    name: sonic-net/sonic-sairedis
    endpoint: sonic-net
  - repository: sonic-swss
    type: github
    name: sonic-net/sonic-swss
    endpoint: sonic-net

parameters:
  - name: debian_version
    type: string
    default: bookworm
variables:
  - name: BUILD_BRANCH
    ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
      value: $(System.PullRequest.TargetBranch)
    ${{ else }}:
      value: $(Build.SourceBranchName)

stages:
- stage: Build

  jobs:
  - job:
    displayName: "amd64/ubuntu-20.04"
    pool:
      vmImage: 'ubuntu-20.04'

    steps:
    - script: |
        sudo apt-get update
        sudo apt-get install -y make libtool m4 autoconf dh-exec debhelper cmake pkg-config nlohmann-json3-dev \
                         libhiredis-dev libnl-3-dev libnl-genl-3-dev libnl-route-3-dev libnl-nf-3-dev swig3.0 \
                         libpython2.7-dev libboost-dev libboost-serialization-dev uuid-dev libzmq3-dev
        sudo apt-get install -y sudo
        sudo apt-get install -y redis-server redis-tools
        sudo apt-get install -y python3-pip
        sudo pip3 install pytest
        sudo apt-get install -y python
        sudo apt-get install cmake libgtest-dev libgmock-dev libyang-dev
        cd /usr/src/gtest && sudo cmake . && sudo make
        ARCH=$(dpkg --print-architecture)
        set -x
        sudo curl -fsSL -o /usr/local/bin/bazel \
            https://github.com/bazelbuild/bazelisk/releases/latest/download/bazelisk-linux-${ARCH}
        sudo chmod 755 /usr/local/bin/bazel
      displayName: "Install dependencies"
    - script: |
        ./autogen.sh
        dpkg-buildpackage -rfakeroot -us -uc -b -j$(nproc) && cp ../*.deb .
      displayName: "Compile sonic swss common"
    - script: |
        bazel build //...
        bazel test //...
      displayName: "Compile and test all Bazel targets"
    - publish: $(System.DefaultWorkingDirectory)/
      artifact: sonic-swss-common.amd64.ubuntu20_04
      displayName: "Archive swss common debian packages"

  - job:
    displayName: "amd64/ubuntu-22.04"
    pool:
      vmImage: 'ubuntu-22.04'

    steps:
    - script: |
        sudo apt-get update
        sudo apt-get install -y make libtool m4 autoconf dh-exec debhelper cmake pkg-config nlohmann-json3-dev \
                         libhiredis-dev libnl-3-dev libnl-genl-3-dev libnl-route-3-dev libnl-nf-3-dev swig4.0 \
                         libpython3-dev libboost-dev libboost-serialization-dev uuid-dev libzmq3-dev
        sudo apt-get install -y sudo
        sudo apt-get install -y redis-server redis-tools
        sudo apt-get install -y python3-pip
        sudo pip3 install pytest
        sudo apt-get install -y python
        sudo apt-get install cmake libgtest-dev libgmock-dev libyang-dev
        cd /usr/src/gtest && sudo cmake . && sudo make
        ARCH=$(dpkg --print-architecture)
        set -x
        sudo curl -fsSL -o /usr/local/bin/bazel \
            https://github.com/bazelbuild/bazelisk/releases/latest/download/bazelisk-linux-${ARCH}
        sudo chmod 755 /usr/local/bin/bazel
      displayName: "Install dependencies"
    - script: |
        ./autogen.sh
        dpkg-buildpackage -rfakeroot -us -uc -Pnopython2 -b -j$(nproc) && cp ../*.deb .
      displayName: "Compile sonic swss common"
    - script: |
        bazel build //...
        bazel test //...
      displayName: "Compile and test all Bazel targets"
    - publish: $(System.DefaultWorkingDirectory)/
      artifact: sonic-swss-common.amd64.ubuntu22_04
      displayName: "Archive swss common debian packages"

  - template: .azure-pipelines/build-template.yml
    parameters:
      arch: amd64
      sonic_slave: sonic-slave-${{ parameters.debian_version }}:$(BUILD_BRANCH)
      artifact_name: sonic-swss-common-${{ parameters.debian_version }}
      run_unit_test: true
      archive_gcov: true
      debian_version: ${{ parameters.debian_version }}

- stage: BuildArm
  dependsOn: Build
  condition: succeeded('Build')
  jobs:
  - template: .azure-pipelines/build-template.yml
    parameters:
      arch: armhf
      timeout: 180
      pool: sonicbld-armhf
      sonic_slave: sonic-slave-${{ parameters.debian_version }}-armhf:$(BUILD_BRANCH)
      artifact_name: sonic-swss-common-${{ parameters.debian_version }}.armhf
      debian_version: ${{ parameters.debian_version }}

  - template: .azure-pipelines/build-template.yml
    parameters:
      arch: arm64
      timeout: 180
      pool: sonicbld-arm64
      sonic_slave: sonic-slave-${{ parameters.debian_version }}-arm64:$(BUILD_BRANCH)
      artifact_name: sonic-swss-common-${{ parameters.debian_version }}.arm64
      debian_version: ${{ parameters.debian_version }}

- stage: BuildSairedis
  dependsOn: Build
  condition: succeeded('Build')
  jobs:
  - template: .azure-pipelines/build-sairedis-template.yml
    parameters:
      arch: amd64
      sonic_slave: sonic-slave-${{ parameters.debian_version }}:$(BUILD_BRANCH)
      swss_common_artifact_name: sonic-swss-common-${{ parameters.debian_version }}
      artifact_name: sonic-sairedis-${{ parameters.debian_version }}
      syslog_artifact_name: sonic-sairedis.syslog
      debian_version: ${{ parameters.debian_version }}

- stage: BuildSwss
  dependsOn: BuildSairedis
  condition: succeeded('BuildSairedis')
  jobs:
  - template: .azure-pipelines/build-swss-template.yml
    parameters:
      arch: amd64
      sonic_slave: sonic-slave-${{ parameters.debian_version }}:$(BUILD_BRANCH)
      swss_common_artifact_name: sonic-swss-common-${{ parameters.debian_version }}
      sairedis_artifact_name: sonic-sairedis-${{ parameters.debian_version }}
      artifact_name: sonic-swss-${{ parameters.debian_version }}
      debian_version: ${{ parameters.debian_version }}

- stage: BuildDocker
  dependsOn: BuildSwss
  condition: succeeded('BuildSwss')
  jobs:
  - template: .azure-pipelines/build-docker-sonic-vs-template.yml
    parameters:
      swss_common_artifact_name: sonic-swss-common-${{ parameters.debian_version }}
      sairedis_artifact_name: sonic-sairedis-${{ parameters.debian_version }}
      swss_artifact_name: sonic-swss-${{ parameters.debian_version }}
      artifact_name: docker-sonic-vs

- stage: Test
  dependsOn: BuildDocker
  condition: succeeded('BuildDocker')
  jobs:
  - template: .azure-pipelines/test-docker-sonic-vs-template.yml
    parameters:
      log_artifact_name: log
