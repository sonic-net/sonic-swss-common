parameters:
- name: timeout
  type: number
  default: 360

- name: log_artifact_name
  type: string

- name: sonic_buildimage_ubuntu22_04
  type: string
  default: '$(BUILD_BRANCH)'

jobs:
- job:
  displayName: vstest
  timeoutInMinutes: ${{ parameters.timeout }}

  pool: sonictest

  steps:
  - checkout: self
    clean: true
    displayName: "Checkout sonic-swss-common"
  - checkout: sonic-swss
    clean: true
    displayName: "Checkout sonic-swss"
  - script: |
      set -ex
      cd sonic-swss
      git checkout $(BUILD_BRANCH)
    displayName: Set up sonic-swss branch
  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: docker-sonic-vs
      path: $(Build.ArtifactStagingDirectory)/download
    displayName: "Download pre-stage built docker-sonic-vs"
  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: sonic-swss-common.amd64.ubuntu22_04
      path: $(Build.ArtifactStagingDirectory)/download
    displayName: "Download pre-stage built sonic-swss-common.amd64.ubuntu22_04"
  - task: DownloadPipelineArtifact@2
    inputs:
      source: specific
      project: build
      pipeline: sonic-net.sonic-buildimage-ubuntu22.04
      artifact: sonic-buildimage.amd64.ubuntu22_04
      runVersion: 'latestFromBranch'
      runBranch: 'refs/heads/${{ parameters.sonic_buildimage_ubuntu22_04 }}'
      path: $(Build.ArtifactStagingDirectory)/download
    displayName: "Download sonic buildimage ubuntu22.04 deb packages"

  - script: |
      set -ex
      # install packages for vs test
      sudo pip3 install pytest flaky exabgp docker redis

      # install packages for kvm test
      sudo apt-get -o DPkg::Lock::Timeout=600 install -y libvirt-clients \
          qemu \
          openvswitch-switch \
          net-tools \
          bridge-utils \
          vlan \
          python3-libvirt \
          libzmq3-dev \
          libzmq5 \
          libboost-serialization1.74.0 \
          libboost1.74-dev \
          libboost-dev \
          libhiredis0.14 \
          libyang-dev \
          uuid-dev \
          net-tools \
          bridge-utils \
          vlan

      sudo sonic-swss-common/.azure-pipelines/build_and_install_module.sh

      sudo dpkg -i $(Build.ArtifactStagingDirectory)/download/libprotobuf*_amd64.deb $(Build.ArtifactStagingDirectory)/download/libprotobuf-lite*_amd64.deb $(Build.ArtifactStagingDirectory)/download/python3-protobuf*_amd64.deb 
      sudo dpkg -i $(Build.ArtifactStagingDirectory)/download/libdashapi*.deb
      sudo dpkg -i --force-confask,confnew $(Build.ArtifactStagingDirectory)/download/libswsscommon_1.0.0_amd64.deb || apt-get install -f
      sudo dpkg -i $(Build.ArtifactStagingDirectory)/download/python3-swsscommon_1.0.0_amd64.deb
    displayName: "Install dependencies"

  - script: |
      set -ex
      sudo docker load -i $(Build.ArtifactStagingDirectory)/download/docker-sonic-vs.gz
      docker ps
      ip netns list
      sudo /sbin/ip link add Vrf1 type vrf table 1001 || { echo 'vrf command failed' ; exit 1; }
      sudo /sbin/ip link del Vrf1 type vrf table 1001
      pushd sonic-swss/tests

      all_tests=$(ls test_*.py | xargs)
      all_tests="${all_tests} p4rt dash"

      # Run the tests in parallel and retry
      retry=3
      IMAGE_NAME=docker-sonic-vs:$(Build.DefinitionName).$(Build.BuildNumber)
      echo $all_tests | xargs -n 1 | xargs -P 8 -I TEST_MODULE sudo ./run-tests.sh "$IMAGE_NAME" "--force-recreate-dvs" "TEST_MODULE" 3

      rm -rf $(Build.ArtifactStagingDirectory)/download
    displayName: "Run vs tests"
    ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
      continueOnError: true

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/*_tr.xml'
      testRunTitle: vstest
    condition: always()

  - script: |
      if [ -d sonic-swss/tests/log ]; then
        cp -r sonic-swss/tests/log $(Build.ArtifactStagingDirectory)/
      fi
    displayName: "Collect logs"
    condition: always()

  - publish: $(Build.ArtifactStagingDirectory)/
    artifact: ${{ parameters.log_artifact_name }}@$(System.JobAttempt)
    displayName: "Publish logs"
    condition: always()
