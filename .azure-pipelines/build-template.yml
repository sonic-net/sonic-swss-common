parameters:
- name: arch
  type: string
  values:
  - amd64
  - armhf
  - arm64

- name: pool
  type: string
  values:
  - sonicbld
  - sonicbld-arm64
  - sonicbld-armhf
  - default
  default: default

- name: timeout
  type: number
  default: 60

- name: sonic_slave
  type: string

- name: artifact_name
  type: string

- name: run_unit_test
  type: boolean
  default: false

- name: archive_gcov
  type: boolean
  default: false

- name: debian_version
  type: string
  default: bullseye

jobs:
- job:
  displayName: ${{ parameters.arch }}
  timeoutInMinutes: ${{ parameters.timeout }}
  variables:
    DIFF_COVER_CHECK_THRESHOLD: 80
    ${{ if eq(parameters.run_unit_test, true) }}:
      DIFF_COVER_ENABLE: 'true'

  pool:
    ${{ if ne(parameters.pool, 'default') }}:
      name: ${{ parameters.pool }}
    ${{ else }}:
      vmImage: 'ubuntu-22.04'

  container:
    image: sonicdev-microsoft.azurecr.io:443/${{ parameters.sonic_slave }}

  steps:
  - checkout: self
    clean: true
  - script: |
      set -ex
      sudo apt-get update
      sudo apt-get install -qq -y \
        libhiredis-dev \
        libnl-3-dev \
        libnl-genl-3-dev \
        libnl-route-3-dev \
        libnl-nf-3-dev \
        swig
    displayName: "Install dependencies"
  - task: DownloadPipelineArtifact@2
    inputs:
      source: specific
      project: build
      pipeline: Azure.sonic-buildimage.common_libs
      runVersion: 'latestFromBranch'
      runBranch: 'refs/heads/$(BUILD_BRANCH)'
      path: $(Build.ArtifactStagingDirectory)/download
      ${{ if eq(parameters.arch, 'amd64') }}:
        artifact: common-lib
      ${{ else }}:
        artifact: common-lib.${{ parameters.arch }}
      patterns: |
        target/debs/${{ parameters.debian_version }}/libyang-*_1.0*.deb
        target/debs/${{ parameters.debian_version }}/libyang_1.0*.deb
        target/debs/${{ parameters.debian_version }}/libyang-cpp_*.deb
        target/debs/${{ parameters.debian_version }}/python3-yang_*.deb
    displayName: "Download libyang from ${{ parameters.arch }} common lib"
    condition: ne('${{ parameters.debian_version }}', 'trixie')
  - task: DownloadPipelineArtifact@2
    inputs:
      source: specific
      project: build
      pipeline: Azure.sonic-buildimage.common_libs
      runVersion: 'specific'
      pipelineId: '926659'
      path: $(Build.ArtifactStagingDirectory)/download
      ${{ if eq(parameters.arch, 'amd64') }}:
        artifact: common-lib
      ${{ else }}:
        artifact: common-lib.${{ parameters.arch }}
      patterns: |
        target/debs/${{ parameters.debian_version }}/libyang-*_1.0*.deb
        target/debs/${{ parameters.debian_version }}/libyang_1.0*.deb
        target/debs/${{ parameters.debian_version }}/libyang-cpp_*.deb
        target/debs/${{ parameters.debian_version }}/python3-yang_*.deb
        target/debs/${{ parameters.debian_version }}/libpcre*.deb
    displayName: "Download libyang from ${{ parameters.arch }} common lib"
    condition: eq('${{ parameters.debian_version }}', 'trixie')
  - script: |
      set -ex
      sudo dpkg -i $(find ./download -name *.deb)
    workingDirectory: $(Build.ArtifactStagingDirectory)
    displayName: "Install libyang from common lib"
  - task: DownloadPipelineArtifact@2
    inputs:
      source: specific
      project: build
      pipeline: 142
      artifact: sonic-buildimage.vs
      runVersion: 'latestFromBranch'
      runBranch: 'refs/heads/$(BUILD_BRANCH)'
      path: $(Build.ArtifactStagingDirectory)/download
      patterns: |
        target/python-wheels/${{ parameters.debian_version }}/sonic_yang_mgmt-1.0-py3-none-any.whl
        target/python-wheels/${{ parameters.debian_version }}/sonic_yang_models-1.0-py3-none-any.whl
    displayName: "Download yang wheel from latest sonic-buildimage build"
    condition: ne('${{ parameters.debian_version }}', 'trixie')
  - task: DownloadPipelineArtifact@2
    inputs:
      source: specific
      project: build
      pipeline: 142
      artifact: sonic-buildimage.vs
      runVersion: 'latestFromBranch'
      runBranch: 'refs/heads/$(BUILD_BRANCH)'
      path: $(Build.ArtifactStagingDirectory)/download
      patterns: |
        target/python-wheels/bookworm/sonic_yang_mgmt-1.0-py3-none-any.whl
        target/python-wheels/bookworm/sonic_yang_models-1.0-py3-none-any.whl
    displayName: "Download yang wheel from latest sonic-buildimage build"
    condition: eq('${{ parameters.debian_version }}', 'trixie')
  - script: |
      set -ex
      sudo pip3 install ./download/target/python-wheels/${{ parameters.debian_version }}/sonic_yang_mgmt-1.0-py3-none-any.whl \
                        ./download/target/python-wheels/${{ parameters.debian_version }}/sonic_yang_models-1.0-py3-none-any.whl
    workingDirectory: $(Build.ArtifactStagingDirectory)
    displayName: "Install yang wheel from common lib"
    condition: ne('${{ parameters.debian_version }}', 'trixie')
  - script: |
      set -ex
      sudo pip3 install ./download/target/python-wheels/bookworm/sonic_yang_mgmt-1.0-py3-none-any.whl \
                        ./download/target/python-wheels/bookworm/sonic_yang_models-1.0-py3-none-any.whl
    workingDirectory: $(Build.ArtifactStagingDirectory)
    displayName: "Install yang wheel from common lib"
    condition: eq('${{ parameters.debian_version }}', 'trixie')
  - script: |
      set -ex
      rm ../*.deb || true
      ./autogen.sh
      DEB_CONFIGURE_EXTRA_FLAGS='--enable-code-coverage' DEB_CXXFLAGS_APPEND="-coverage -fprofile-abs-path" DEB_LDFLAGS_APPEND="-coverage -fprofile-abs-path" dpkg-buildpackage -Pnopython2 -us -uc -b -j$(nproc)
      mv ../*.deb .
    displayName: "Compile sonic swss common with coverage enabled"
  - ${{ if eq(parameters.run_unit_test, true) }}:
    - script: |
        set -ex
        sudo pip install Pympler==0.8 pytest
        sudo apt-get install -y redis-server
        sudo dpkg -i libswsscommon_*.deb
        sudo dpkg -i libswsscommon-dev_*.deb
        sudo dpkg -i python3-swsscommon_*.deb

        ps aux
        cargo test           --workspace --all-features
        cargo test --release --workspace --all-features

        sudo sed -i 's/notify-keyspace-events ""/notify-keyspace-events AKE/' /etc/redis/redis.conf
        sudo sed -ri 's/^# unixsocket/unixsocket/' /etc/redis/redis.conf
        sudo sed -ri 's/^unixsocketperm .../unixsocketperm 777/' /etc/redis/redis.conf
        sudo sed -ri 's/redis-server.sock/redis.sock/' /etc/redis/redis.conf
        sudo service redis-server restart
        sudo mkdir -p /usr/local/yang-models

        ./tests/tests
        redis-cli FLUSHALL
        pytest-3 --cov=. --cov-report=xml
        [ -f coverage.xml ] && mv coverage.xml tests/coverage.xml
        gcovr -r ./ -e ".*/swsscommon_wrap.cpp" -e=tests --exclude-unreachable-branches --exclude-throw-branches --gcov-ignore-parse-errors -x --xml-pretty  -o coverage.xml
        make -C goext
        redis-cli FLUSHALL
        make -C goext check

        rm -rf $(Build.ArtifactStagingDirectory)/download
      displayName: "Run swss common unit tests"
  - publish: $(System.DefaultWorkingDirectory)/
    artifact: ${{ parameters.artifact_name }}
    displayName: "Archive swss common debian packages"
  - ${{ if eq(parameters.archive_gcov, true) }}:
    - script: |
        set -ex
        # Install .NET CORE
        curl -sSL https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
        sudo apt-add-repository https://packages.microsoft.com/debian/12/prod
        sudo apt-get update
        sudo apt-get install -y dotnet-sdk-8.0
      displayName: "Install .NET CORE"
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage.xml'
      displayName: 'Publish test coverage'
  - ${{ if and(eq(variables['Build.Reason'], 'PullRequest'), ne(variables['DIFF_COVER_DISABLE'], 'true')) }}:
    - script: |
        sudo pip install diff-cover
        target_branch=$(System.PullRequest.TargetBranch)
        compare_branch=origin/${target_branch#refs/heads/}
        mkdir -p .coverage/htmlcov
        converage_files="$DIFF_COVER_COVERAGE_FILES"
        if [ -z "$converage_files" ]; then
          converage_files="$(find . -maxdepth 2 -name coverage.xml)"
        fi
        if [ -z "$converage_files" ]; then
          echo "Skipped, the coverage files not found"
          exit 0
        fi
        diff-cover $converage_files --ignore-unstaged --compare-branch=$compare_branch --html-report=.coverage/htmlcov/index.html
        diff-cover $converage_files --ignore-unstaged --compare-branch=$compare_branch --json-report=.coverage/diff-cover.json
        echo "##vso[task.setvariable variable=disable.coverage.autogenerate;]true"
        echo "##vso[task.setvariable variable=has.coverage.files;]true"
      displayName: "Show diff coverage"
      continueOnError: true
    - ${{ if ne(variables['DIFF_COVER_CHECK_DISABLE'], 'true') }}:
      - task: PythonScript@0
        inputs:
          scriptSource: inline
          script: |
            import json, requests, os, datetime
            cover = {}
            checkThreshold=os.environ.get('DIFF_COVER_CHECK_THRESHOLD')
            if not checkThreshold:
              checkThreshold = '0'
            threshold = 0
            try:
              threshold = float(checkThreshold)
            except:
              print('Failed to parse the DIFF_COVER_CHECK_THRESHOLD={0} to float'.format(checkThreshold))
              exit(0)
            with open(".coverage/diff-cover.json", "r") as f:
              cover=json.load(f)
            properties = {
              'pullRequestId': $(System.PullRequest.PullRequestNumber),
              'repoUri': '$(System.PullRequest.SourceRepositoryURI)',
              'targetBranch': '$(System.PullRequest.TargetBranch)',
              'sourceCommitId': '$(system.pullRequest.sourceCommitId)',
              'sourceVersion': '$(Build.SourceVersion)',
              'jobName': '$(Agent.JobName)',
              'jobId': '$(System.JobId)',
              'definitionName': '$(Build.DefinitionName)',
              'stageName': '$(System.StageName)',
              'jobAttempt': '$(System.JobAttempt)',
              'timestamp': datetime.datetime.now().isoformat(),
              'cover.threshold': threshold,
              'cover.num_lines': cover.get("total_num_lines"),
              'cover.num_violations': cover.get("total_num_violations"),
              'cover.percent_covered': cover.get("total_percent_covered"),
            }
            data = [
              {
                'op': 'add',
                'path': '/codediff.{0}'.format('$(Agent.JobName)'),
                'value': json.dumps(properties)
              }
            ]
            url="$(System.CollectionUri)$(System.TeamProjectId)/_apis/build/builds/$(Build.BuildId)/properties?api-version=6.0-preview.1"
            authentication='Bearer {0}'.format(os.environ.get('SYSTEM_ACCESSTOKEN'))
            headers = {"Authorization":authentication, "Content-Type":"application/json-patch+json"}
            response = requests.patch(url, headers=headers, data=json.dumps(data))
            if (response.status_code == 200):
              print('The request was succeeded.')
            else:
              print('The request was failed, with error: {0}'.format(response.status_code))
              print('The failure reason is {0}'.format(response.reason))
        displayName: 'Update Build coverage'
        condition: eq(variables['has.coverage.files'], 'true')
        continueOnError: true
        env:
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    - ${{ if ne(variables['DIFF_COVER_COVERAGE_REPORT_DISABLE'], 'true') }}:
      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage.xml'
          reportDirectory: '$(System.DefaultWorkingDirectory)/diff-cover/htmlcov'
        displayName: 'Publish coverage'
        condition: eq(variables['has.coverage.files'], 'true')
        continueOnError: true
