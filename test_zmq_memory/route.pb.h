// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: route.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_route_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_route_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_route_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_route_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_route_2eproto;
namespace contacts {
class FieldsValues;
struct FieldsValuesDefaultTypeInternal;
extern FieldsValuesDefaultTypeInternal _FieldsValues_default_instance_;
class KeyOpFieldsValues;
struct KeyOpFieldsValuesDefaultTypeInternal;
extern KeyOpFieldsValuesDefaultTypeInternal _KeyOpFieldsValues_default_instance_;
}  // namespace contacts
PROTOBUF_NAMESPACE_OPEN
template<> ::contacts::FieldsValues* Arena::CreateMaybeMessage<::contacts::FieldsValues>(Arena*);
template<> ::contacts::KeyOpFieldsValues* Arena::CreateMaybeMessage<::contacts::KeyOpFieldsValues>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace contacts {

// ===================================================================

class FieldsValues final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:contacts.FieldsValues) */ {
 public:
  inline FieldsValues() : FieldsValues(nullptr) {}
  ~FieldsValues() override;
  explicit PROTOBUF_CONSTEXPR FieldsValues(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FieldsValues(const FieldsValues& from);
  FieldsValues(FieldsValues&& from) noexcept
    : FieldsValues() {
    *this = ::std::move(from);
  }

  inline FieldsValues& operator=(const FieldsValues& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldsValues& operator=(FieldsValues&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FieldsValues& default_instance() {
    return *internal_default_instance();
  }
  static inline const FieldsValues* internal_default_instance() {
    return reinterpret_cast<const FieldsValues*>(
               &_FieldsValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FieldsValues& a, FieldsValues& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldsValues* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldsValues* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FieldsValues* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FieldsValues>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FieldsValues& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FieldsValues& from) {
    FieldsValues::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldsValues* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "contacts.FieldsValues";
  }
  protected:
  explicit FieldsValues(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string field = 1;
  void clear_field();
  const std::string& field() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_field(ArgT0&& arg0, ArgT... args);
  std::string* mutable_field();
  PROTOBUF_NODISCARD std::string* release_field();
  void set_allocated_field(std::string* field);
  private:
  const std::string& _internal_field() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field(const std::string& value);
  std::string* _internal_mutable_field();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:contacts.FieldsValues)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_route_2eproto;
};
// -------------------------------------------------------------------

class KeyOpFieldsValues final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:contacts.KeyOpFieldsValues) */ {
 public:
  inline KeyOpFieldsValues() : KeyOpFieldsValues(nullptr) {}
  ~KeyOpFieldsValues() override;
  explicit PROTOBUF_CONSTEXPR KeyOpFieldsValues(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyOpFieldsValues(const KeyOpFieldsValues& from);
  KeyOpFieldsValues(KeyOpFieldsValues&& from) noexcept
    : KeyOpFieldsValues() {
    *this = ::std::move(from);
  }

  inline KeyOpFieldsValues& operator=(const KeyOpFieldsValues& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyOpFieldsValues& operator=(KeyOpFieldsValues&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyOpFieldsValues& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyOpFieldsValues* internal_default_instance() {
    return reinterpret_cast<const KeyOpFieldsValues*>(
               &_KeyOpFieldsValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(KeyOpFieldsValues& a, KeyOpFieldsValues& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyOpFieldsValues* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyOpFieldsValues* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeyOpFieldsValues* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeyOpFieldsValues>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeyOpFieldsValues& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KeyOpFieldsValues& from) {
    KeyOpFieldsValues::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyOpFieldsValues* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "contacts.KeyOpFieldsValues";
  }
  protected:
  explicit KeyOpFieldsValues(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFvsFieldNumber = 3,
    kKeyFieldNumber = 1,
    kOpFieldNumber = 2,
  };
  // repeated .contacts.FieldsValues fvs = 3;
  int fvs_size() const;
  private:
  int _internal_fvs_size() const;
  public:
  void clear_fvs();
  ::contacts::FieldsValues* mutable_fvs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contacts::FieldsValues >*
      mutable_fvs();
  private:
  const ::contacts::FieldsValues& _internal_fvs(int index) const;
  ::contacts::FieldsValues* _internal_add_fvs();
  public:
  const ::contacts::FieldsValues& fvs(int index) const;
  ::contacts::FieldsValues* add_fvs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contacts::FieldsValues >&
      fvs() const;

  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string op = 2;
  void clear_op();
  const std::string& op() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_op(ArgT0&& arg0, ArgT... args);
  std::string* mutable_op();
  PROTOBUF_NODISCARD std::string* release_op();
  void set_allocated_op(std::string* op);
  private:
  const std::string& _internal_op() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_op(const std::string& value);
  std::string* _internal_mutable_op();
  public:

  // @@protoc_insertion_point(class_scope:contacts.KeyOpFieldsValues)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contacts::FieldsValues > fvs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr op_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_route_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FieldsValues

// string field = 1;
inline void FieldsValues::clear_field() {
  _impl_.field_.ClearToEmpty();
}
inline const std::string& FieldsValues::field() const {
  // @@protoc_insertion_point(field_get:contacts.FieldsValues.field)
  return _internal_field();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FieldsValues::set_field(ArgT0&& arg0, ArgT... args) {
 
 _impl_.field_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:contacts.FieldsValues.field)
}
inline std::string* FieldsValues::mutable_field() {
  std::string* _s = _internal_mutable_field();
  // @@protoc_insertion_point(field_mutable:contacts.FieldsValues.field)
  return _s;
}
inline const std::string& FieldsValues::_internal_field() const {
  return _impl_.field_.Get();
}
inline void FieldsValues::_internal_set_field(const std::string& value) {
  
  _impl_.field_.Set(value, GetArenaForAllocation());
}
inline std::string* FieldsValues::_internal_mutable_field() {
  
  return _impl_.field_.Mutable(GetArenaForAllocation());
}
inline std::string* FieldsValues::release_field() {
  // @@protoc_insertion_point(field_release:contacts.FieldsValues.field)
  return _impl_.field_.Release();
}
inline void FieldsValues::set_allocated_field(std::string* field) {
  if (field != nullptr) {
    
  } else {
    
  }
  _impl_.field_.SetAllocated(field, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.field_.IsDefault()) {
    _impl_.field_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:contacts.FieldsValues.field)
}

// string value = 2;
inline void FieldsValues::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& FieldsValues::value() const {
  // @@protoc_insertion_point(field_get:contacts.FieldsValues.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FieldsValues::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:contacts.FieldsValues.value)
}
inline std::string* FieldsValues::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:contacts.FieldsValues.value)
  return _s;
}
inline const std::string& FieldsValues::_internal_value() const {
  return _impl_.value_.Get();
}
inline void FieldsValues::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* FieldsValues::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* FieldsValues::release_value() {
  // @@protoc_insertion_point(field_release:contacts.FieldsValues.value)
  return _impl_.value_.Release();
}
inline void FieldsValues::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:contacts.FieldsValues.value)
}

// -------------------------------------------------------------------

// KeyOpFieldsValues

// string key = 1;
inline void KeyOpFieldsValues::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& KeyOpFieldsValues::key() const {
  // @@protoc_insertion_point(field_get:contacts.KeyOpFieldsValues.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyOpFieldsValues::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:contacts.KeyOpFieldsValues.key)
}
inline std::string* KeyOpFieldsValues::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:contacts.KeyOpFieldsValues.key)
  return _s;
}
inline const std::string& KeyOpFieldsValues::_internal_key() const {
  return _impl_.key_.Get();
}
inline void KeyOpFieldsValues::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* KeyOpFieldsValues::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* KeyOpFieldsValues::release_key() {
  // @@protoc_insertion_point(field_release:contacts.KeyOpFieldsValues.key)
  return _impl_.key_.Release();
}
inline void KeyOpFieldsValues::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:contacts.KeyOpFieldsValues.key)
}

// string op = 2;
inline void KeyOpFieldsValues::clear_op() {
  _impl_.op_.ClearToEmpty();
}
inline const std::string& KeyOpFieldsValues::op() const {
  // @@protoc_insertion_point(field_get:contacts.KeyOpFieldsValues.op)
  return _internal_op();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyOpFieldsValues::set_op(ArgT0&& arg0, ArgT... args) {
 
 _impl_.op_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:contacts.KeyOpFieldsValues.op)
}
inline std::string* KeyOpFieldsValues::mutable_op() {
  std::string* _s = _internal_mutable_op();
  // @@protoc_insertion_point(field_mutable:contacts.KeyOpFieldsValues.op)
  return _s;
}
inline const std::string& KeyOpFieldsValues::_internal_op() const {
  return _impl_.op_.Get();
}
inline void KeyOpFieldsValues::_internal_set_op(const std::string& value) {
  
  _impl_.op_.Set(value, GetArenaForAllocation());
}
inline std::string* KeyOpFieldsValues::_internal_mutable_op() {
  
  return _impl_.op_.Mutable(GetArenaForAllocation());
}
inline std::string* KeyOpFieldsValues::release_op() {
  // @@protoc_insertion_point(field_release:contacts.KeyOpFieldsValues.op)
  return _impl_.op_.Release();
}
inline void KeyOpFieldsValues::set_allocated_op(std::string* op) {
  if (op != nullptr) {
    
  } else {
    
  }
  _impl_.op_.SetAllocated(op, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.op_.IsDefault()) {
    _impl_.op_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:contacts.KeyOpFieldsValues.op)
}

// repeated .contacts.FieldsValues fvs = 3;
inline int KeyOpFieldsValues::_internal_fvs_size() const {
  return _impl_.fvs_.size();
}
inline int KeyOpFieldsValues::fvs_size() const {
  return _internal_fvs_size();
}
inline void KeyOpFieldsValues::clear_fvs() {
  _impl_.fvs_.Clear();
}
inline ::contacts::FieldsValues* KeyOpFieldsValues::mutable_fvs(int index) {
  // @@protoc_insertion_point(field_mutable:contacts.KeyOpFieldsValues.fvs)
  return _impl_.fvs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contacts::FieldsValues >*
KeyOpFieldsValues::mutable_fvs() {
  // @@protoc_insertion_point(field_mutable_list:contacts.KeyOpFieldsValues.fvs)
  return &_impl_.fvs_;
}
inline const ::contacts::FieldsValues& KeyOpFieldsValues::_internal_fvs(int index) const {
  return _impl_.fvs_.Get(index);
}
inline const ::contacts::FieldsValues& KeyOpFieldsValues::fvs(int index) const {
  // @@protoc_insertion_point(field_get:contacts.KeyOpFieldsValues.fvs)
  return _internal_fvs(index);
}
inline ::contacts::FieldsValues* KeyOpFieldsValues::_internal_add_fvs() {
  return _impl_.fvs_.Add();
}
inline ::contacts::FieldsValues* KeyOpFieldsValues::add_fvs() {
  ::contacts::FieldsValues* _add = _internal_add_fvs();
  // @@protoc_insertion_point(field_add:contacts.KeyOpFieldsValues.fvs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contacts::FieldsValues >&
KeyOpFieldsValues::fvs() const {
  // @@protoc_insertion_point(field_list:contacts.KeyOpFieldsValues.fvs)
  return _impl_.fvs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace contacts

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_route_2eproto
